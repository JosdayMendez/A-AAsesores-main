@model A_AAsesoresWeb.Entities.PropertyEnt

@{
    ViewBag.Title = "ViewProperty";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Leaflet se necesita para el mapa -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />

<style>
    /* Establecer tamaño fijo para las imágenes del carousel */
    .carousel-item img {
        width: 100%; /* Ancho fijo */
        height: 600px; /* Altura fija */
        object-fit: cover; /* Relleno para cubrir el contenedor */
    }
</style>

<div class="container-fluid">

    <!-- Page-Title -->
    <div class="row">
        <div class="col-md-12 col-lg-12">
            <div class="d-flex justify-content-start align-items-center my-3">
                <div class="mr-2">
                    <div class="round">
                        <i class="fa fa-home"></i>
                    </div>
                </div>
                <div>
                    <h3 class="mt-0 mb-0" style="color: black;">@Model.Title</h3>
                </div>
            </div>
        </div>
    </div>
    <!-- end page title end breadcrumb -->
    <!-- Page-Title -->
    <div class="row">
        <div class="col-lg-12">
            <div class="card m-b-20">
                <div class="card-body">
                    <h4 class="card-title font-20 mt-0">Galería de imágenes</h4>
                    <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
                        <div class="carousel-inner" role="listbox">
                            @{
                                var isFirst = true; // Variable para rastrear si es el primer elemento del ciclo
                                foreach (var item in Model.ImagesInfo)
                                {
                                    <div class="carousel-item @(isFirst ? "active" : "")">
                                        <img class="d-block img-fluid" src="@item.ImageUrl" alt="Slide">
                                    </div>

                                    isFirst = false; // Después del primer elemento, establecemos isFirst como falso
                                }
                            }
                        </div>
                        <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4">
            <div class="card m-b-20 inf">
                <div class="card-body" style="text-align: center;">
                    <h4 class="card-title font-20 mt-0">Agente inmobiliario</h4>
                    <img src="@Model.EmployeeImage" alt="user" class="rounded-circle" style="height: 150px;"> <br />
                    <p>Nombre del agente: @Model.EmployeeName</p>
                    <p>Correo electrónico: <a href="mailto:@Model.EmployeeMail">@Model.EmployeeMail</a></p>
                    <p>Teléfono: @Model.EmployeePhone</p>
                    <p><a href="https://wa.me/@($"506{Model.EmployeePhone}")" target="_blank" style="color: green"><i class="fa fa-whatsapp fa-2x" aria-hidden="true"></i></a></p>
                </div>
                <div style="padding: 20px; text-align: center;">
                    <button id="openModalBtn" class="btn btn-primary" data-parametro="@Model.Id" data-parametro2="@Model.Title">Agendar Cita</button>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card m-b-20 inf">
                <div class="card-body" style="text-align: center;">
                    <h4 class="card-title font-20 mt-0">Descripción de la propiedad</h4>
                    <p class="card-text" style="text-align: center; white-space: pre-wrap;">@Model.Description
                    </p>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card m-b-20 inf">
                <div class="card-body" style="text-align: center;">
                    <h4 class="card-title font-20 mt-0">Información adicional</h4>
                    <p class="card-text">
                        @if (Model.Currency == 1)
                        {
                            @:Precio: &#8353; @Model.Price.ToString("N2")
                        }
                        else
                        {
                            @:Precio: @Model.Symbol @Model.Price.ToString("N2")
                        }
                    </p>
                    <p class="card-text">
                        Área: @Model.AreaLand.ToString("N2") m<sup>2</sup>
                    </p>
                    <p class="card-text">
                        Área construida: @Model.AreaBuild.ToString("N2") m<sup>2</sup>
                    </p>
                    <p class="card-text">
                        Tipo de propiedad: @Model.PropertyTypeName
                    </p>
                    <p class="card-text">
                        Tipo de transacción: @Model.TransactionTypeName
                    </p>
                    <p class="card-text">
                        Tipo de propiedad: @Model.PropertyTypeName
                    </p>
                </div>
                <div style="padding: 20px; text-align: center;">
                    <button class="btn btn-primary waves-effect waves-light" id="copyUrl">Compartir propiedad</button>
                </div>

            </div>
        </div>
        <div class="col-lg-12">
            <div class="card m-b-20">
                <div class="card-body">
                    <h4 class="mt-0 header-title">Ubicación</h4>
                    <p id="direccion" class="text-muted m-b-30 font-14">
                        <i class="fa fa-map-marker"></i>
                        @Model.FullAddress
                        <br />
                        @Model.OtherSigns
                    </p>
                    <div id="map-container" style="width: 100%; height: 450px;">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="modalContainer"></div> <!-- Contenedor para el modal -->

@section scripts{

    <!-- App js -->
    <script src="~/assets/js/bootstrap.min.js"></script>

    <script src="~/assets/js/app.js"></script>
    <!-- Leaflet coloca el marcador en el mapa -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js"></script>
    <script src="~/assets/plugins/fullcalendar/js/fullcalendar.min.js"></script>



    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.15/jquery.mask.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/parsley.js/2.9.2/parsley.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.getElementById('copyUrl').addEventListener('click', function () {
            var currentUrl = window.location.href; // Obtener la URL actual
            var tempInput = document.createElement('input'); // Crear un elemento de entrada temporal
            tempInput.value = currentUrl; // Establecer el valor del elemento de entrada como la URL actual
            document.body.appendChild(tempInput); // Agregar el elemento de entrada al DOM
            tempInput.select(); // Seleccionar el contenido del elemento de entrada
            document.execCommand('copy'); // Copiar el contenido seleccionado al portapapeles
            document.body.removeChild(tempInput); // Eliminar el elemento de entrada temporal
            Swal.fire({
                title: 'Éxito',
                text: 'Enlace copiado al portapapeles',
                icon: 'success',
                confirmButtonText: 'Aceptar',
            })
        });
    </script>
    <script>
        function cargarMapaConDireccion(direccion) {
            var mapContainer = document.getElementById('map-container');

            function cargarMapa(coordenadas) {
                // Carga el mapa de Leaflet con la dirección especificada
                var map = L.map(mapContainer).setView([coordenadas.lat, coordenadas.lng], 13);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

                // Define un icono personalizado (rojo)
                var redIcon = L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });

                // Agrega el marcador utilizando el icono personalizado
                L.marker([coordenadas.lat, coordenadas.lng], { icon: redIcon }).addTo(map)
                    //.bindPopup('Ubicación').openPopup()
                    .on('click', function (e) {
                        map.setView(e.latlng, 13); // Establece el zoom original al hacer clic en el marcador
                    });
            }

            function buscarDireccionMenosEspecifica(direccion) {
                var partesDireccion = direccion.split(', ');
                if (partesDireccion.length > 1) {
                    partesDireccion.shift();
                    var direccionMasGeneral = partesDireccion.join(', ');
                    cargarMapaConDireccion(direccionMasGeneral);
                } else {
                    console.error('No se encontraron coordenadas para la dirección especificada.');
                }
            }

            fetch('https://nominatim.openstreetmap.org/search?format=json&q=' + encodeURIComponent(direccion))
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        var coordenadas = {
                            lat: parseFloat(data[0].lat),
                            lng: parseFloat(data[0].lon)
                        };
                        // Limpia el contenedor antes de agregar el mapa
                        mapContainer.innerHTML = '';
                        cargarMapa(coordenadas);
                    } else {
                        buscarDireccionMenosEspecifica(direccion);
                    }
                })
                .catch(error => console.error('Error al obtener coordenadas:', error));
        }

        window.onload = function () {
            var direccionElemento = document.getElementById('direccion');
            var direccionTexto = direccionElemento.textContent.trim();
            var partesDireccion = direccionTexto.split(/\r?\n/).map(function (line) {
                return line.trim();
            }).filter(function (part) {
                return part !== ''; // Filtrar segmentos vacíos
            });
            var direccionFormateada = partesDireccion.reverse().join(', ');
            console.log(direccionFormateada)
            cargarMapaConDireccion(direccionFormateada);
        };
    </script>
    <script>
        $(document).ready(function () {
            // Función para igualar la altura de las tarjetas
            function equalizeCardHeights() {
                var maxHeight = 0;
                // Itera sobre cada tarjeta y encuentra la altura máxima
                $(".inf").each(function () {
                    var currentHeight = $(this).outerHeight();
                    if (currentHeight > maxHeight) {
                        maxHeight = currentHeight;
                    }
                });
                // Establece la altura máxima para todas las tarjetas
                $(".inf").outerHeight(maxHeight);
            }

            // Llama a la función para igualar la altura de las tarjetas cuando se carga la página
            equalizeCardHeights();

            // Llama a la función cada vez que se redimensiona la ventana
            $(window).resize(function () {
                equalizeCardHeights();
            });
        });
    </script>

    <!-- Manejo btn Agendar Cita -->

    <script>
        $(document).ready(function () {
            $('#openModalBtn').click(function () {
                // Obtener los valores de los atributos data
                var parametro = $(this).data('parametro');
                var parametro2 = $(this).data('parametro2');

                // Realizar la solicitud AJAX con los datos, incluyendo los parámetros
                $.get('/Appointments/_AddAppointment', { parametro: parametro, parametro2: parametro2 }, function (data) {
                    $('#modalContainer').html(data);
                    $('#addAppointmentModal').modal('show');
                });
            });
        });
    </script>
}