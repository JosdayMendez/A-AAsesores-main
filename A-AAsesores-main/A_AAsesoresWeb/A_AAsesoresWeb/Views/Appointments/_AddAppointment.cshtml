﻿@model A_AAsesoresWeb.Entities.MultiEnt
<!-- HTML del primer modal para seleccionar la fecha en el calendario -->
<div class="modal fade" id="addAppointmentModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title fs-5" id="exampleModalLabel">Selecciona una fecha</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
</div>

<!-- HTML del segundo modal para ingresar la fecha, hora y correo -->
<div class="modal fade" id="registerAppointmentModal" tabindex="-1" aria-labelledby="exampleModalLabel2" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" style="max-height: 80vh;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title fs-5" id="exampleModalLabel2">Registrar cita</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("CreateAppointment", "Appointments", FormMethod.Post, new { @class = "bg-white contact-form", @data_parsley_validate = "true", @id = "RegisterAppointmentForm" }))
            {
                <div class="modal-body" style="max-height: 60vh; overflow-y: auto;">
                    @Html.HiddenFor(m => m.AppointmentEnt.UserId, new { @id = "UserId" }) <!-- Campo oculto para almacenar el Id del usuario -->
                    <div class="form-group">
                        <label>Tipo de Identificación <i class="fa fa-info-circle fa-1x" data-toggle="tooltip" data-placement="top" title="Selecciona el tipo de identificación del empleado (por ejemplo, cédula de ciudadanía, pasaporte, etc.)."></i> </label>
                        @Html.DropDownListFor(m => m.UserEnt.DocumentType, ViewBag.ListDocumentType as List<SelectListItem>, new { @id = "DocumentType", @class = "form-control", required = "required", @data_parsley_required = "true", @data_parsley_error_message = "Por favor, seleccione el tipo de identificación" })
                    </div>
                    <div class="form-group">
                        <label>Número de identificación <i class="fa fa-info-circle fa-1x" data-toggle="tooltip" data-placement="top" title="Ingresa el número de identificación del empleado. Utiliza el formato XX-XXXX-XXXX."></i> </label>
                        @Html.TextBoxFor(m => m.UserEnt.Identification, new { @class = "form-control", @id = "Identification", @onkeyup = "ConsultUserData()", @type = "text", @placeholder = "00-0000-0000", @style = "font-size:14px;", @data_parsley_required = "true", @readonly = "@readonly", @data_parsley_error_message = "Por favor, ingrese el número de identificación." })
                    </div>

                    <div class="form-group">
                        <label>Nombre</label>
                        @Html.TextBoxFor(m => m.UserEnt.Name, new { @readonly = "@readonly", @id = "Name", @class = "form-control", @type = "text", @placeholder = "Nombre", @style = "font-size:14px;", @data_parsley_required = "true", @data_parsley_error_message = "Por favor, ingrese su nombre." })
                    </div>

                    <div class="form-group">
                        <label for="SecondLastName">Segundo Apellido</label>
                        @Html.TextBoxFor(m => m.UserEnt.SecondLastName, new { @readonly = "@readonly", @id = "SecondLastName", @class = "form-control", @type = "text", @placeholder = "Segundo Apellido", @style = "font-size:14px;", @data_parsley_required = "true", @data_parsley_error_message = "Por favor, ingrese su segundo apellido." })
                    </div>

                    <div class="form-group">
                        <label for="FirstLastName">Primer Apellido</label>
                        @Html.TextBoxFor(m => m.UserEnt.FirstLastName, new { @readonly = "@readonly", @id = "FirstLastName", @class = "form-control", @type = "text", @placeholder = "Primer Apellido", @style = "font-size:14px;", @data_parsley_required = "true", @data_parsley_error_message = "Por favor, ingrese su primer apellido." })
                    </div>
                    <div class="form-group">
                        <label>Dirección de Correo <i class="fa fa-info-circle fa-1x" data-toggle="tooltip" data-placement="top" title="Ingresa la dirección de correo electrónico del empleado. Asegúrate de ingresar una dirección válida."></i> </label>
                        @Html.TextBoxFor(m => m.UserEnt.Email, new { @class = "form-control", @id = "Email", @type = "email", @placeholder = "example@example.com", @style = "font-size:14px;", @data_parsley_required = "true", @data_parsley_type = "email", @data_parsley_trigger = "change", @data_parsley_error_message = "Por favor, ingrese una dirección de correo electrónico válida." })
                    </div>
                    <div class="form-group">
                        <label>Teléfono <i class="fa fa-info-circle fa-1x" data-toggle="tooltip" data-placement="top" title="Ingresa el número telefónico del empleado. Utiliza el formato XXXX-XXXX."></i> </label>
                        @Html.TextBoxFor(m => m.UserEnt.PhoneNumber, new { id = "PhoneNumber", @class = "form-control", @type = "text", @placeholder = "8888-8888", @style = "font-size:14px;", @data_parsley_required = "true", @data_parsley_error_message = "Por favor, ingrese el número telefónico." })
                    </div>

                    <div class="form-group">
                        <label for="appointmentDate">Fecha de la cita: <i class="fa fa-info-circle fa-1x" data-toggle="tooltip" data-placement="top" title="Selecciona la fecha de la cita"></i></label>
                        <input type="date" class="form-control" id="appointmentDate1" required>
                    </div>

                    <div class="form-group">
                        <label for="appointmentTime">Hora de la cita:<i class="fa fa-info-circle fa-1x" data-toggle="tooltip" data-placement="top" title="Selecciona la hora de la cita"></i></label>
                        <input type="time" class="form-control" id="appointmentTime" required>
                    </div>
                    <!-- Mostrar el valor del parámetro -->
                    <input type="hidden" id="AppointmentEnt_PropertyId" name="AppointmentEnt.PropertyId" value="@ViewBag.Parametro" />
                    <input type="hidden" id="AppointmentEnt_PropertyName" name="AppointmentEnt.PropertyName" value="@ViewBag.Parametro2" />
                    <p></p>



                    @Html.HiddenFor(m => m.AppointmentEnt.AppointmentDate, new { @id = "AppointmentDate" }) <!-- Campo oculto para almacenar la fecha y hora combinadas -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary" id="registerAppointmentBtn">Registrar</button>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .fc-past-day {
        background-color: #f0f0f0 !important; /* Cambiar el color de fondo de los días pasados */
        color: #999; /* Cambiar el color del texto de los días pasados */
    }
</style>
<script src="~/assets/js/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.15/jquery.mask.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/parsley.js/2.9.2/parsley.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/Utilities/Js/RegisterAppointmentForm.js"></script>
<script src="~/assets/plugins/timepicker/moment.js"></script>
<script src="~/assets/plugins/fullcalendar/js/fullcalendar.min.js"></script>
<script src="~/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
<script src="~/assets/js/bootstrap.min.js"></script>
<script src="~/assets/plugins/fullcalendar/js/locale-all.min.js"></script>

<script>
    $(document).ready(function () {

        var calendarVisible = false;
        var eventsArray = [];

        function initializeCalendar(events) {
            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                locale: 'es',
                defaultDate: moment(),
                defaultView: 'month',
                buttonText: {
                    today: 'Hoy',
                    month: 'Mes',
                    week: 'Semana',
                    day: 'Día'
                },
                selectable: true,
                events: events, // Pasar los eventos al calendario
                eventRender: function (eventObj, $el) {
                    $el.popover({
                        title: eventObj.description,
                        content: eventObj.title,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body'
                    });
                },
                timeFormat: 'HH:mm',
                dayRender: function (date, cell) {
                    var today = moment().startOf('day');
                    if (date.isBefore(today, 'day')) {
                        cell.addClass('fc-past-day'); // Agregar clase CSS a los días pasados
                        cell.attr('data-toggle', 'tooltip');
                        cell.attr('data-placement', 'top');
                        cell.attr('title', 'Este día ya ha pasado y no se puede seleccionar.'); // Agregar tooltip
                        $('[data-toggle="tooltip"]').tooltip();
                    } else if (date.isSame(today, 'day')) {
                        cell.attr('data-toggle', 'tooltip');
                        cell.attr('data-placement', 'top');
                        cell.attr('title', 'Hoy no se puede reservar.'); // Agregar tooltip
                        $('[data-toggle="tooltip"]').tooltip();
                    }
                },
                select: function (start, end, jsEvent, view) {
                    var today = moment().startOf('day');
                    if (start.isSameOrBefore(today)) {
                        $('[data-toggle="tooltip"]').tooltip('hide');
                        return false;
                    }
                    $('#addAppointmentModal').modal('hide');
                    $('#registerAppointmentModal').modal('show');
                    $('#appointmentDate1').val(start.format('YYYY-MM-DD'));
                },
                dayClick: function (date, jsEvent, view) {
                    var today = moment().startOf('day');
                    if (date.isBefore(today, 'day') || date.isSame(today, 'day')) {
                        $('[data-toggle="tooltip"]').tooltip('hide');
                        return false; // Evitar acciones en días pasados
                    }

                    // Continuar con el código para mostrar el modal o realizar otras acciones
                    $('#addAppointmentModal').modal('hide');
                    $('#registerAppointmentModal').modal('show');
                    $('#appointmentDate1').val(date.format('YYYY-MM-DD'));
                }
            });
        }

        $('#registerAppointmentModal').on('hidden.bs.modal', function (e) {
            // Verificar si el modal se cerró sin registrar una cita
            if (e.target.id === "registerAppointmentModal") {
                // Abrir el modal del calendario
                calendarVisible = true;
                $('#addAppointmentModal').modal('show');
            }
        });

        $('#addAppointmentModal').on('shown.bs.modal', function () {
            // Solo inicializar el calendario si no está visible actualmente
            if (!calendarVisible) {
                initializeCalendar(eventsArray); // Pasar los eventos al inicializar el calendario
                calendarVisible = true;
            }
        });

        $('#CreateAppointment').click(function () {
            $('#addAppointmentModal').modal('show');
        });

        $.ajax({
            type: "GET",
            url: "/Appointments/ObtenerReservas",
            data: {},
            cache: false,
            dataType: 'json',
            success: function (events) {

                events.forEach(function (element, index) {
                    let date = new Date(parseInt(element.AppointmentDate.substr(6)));
                    let color = '#b3cbcb';
                    let urlRedirect = '';
                    let title = element.PropertyName;

                    // Formatear la hora con AM/PM
                    let formattedTime = moment(date).format('h:mm A');

                    eventsArray.push({
                        title: title,
                        description: formattedTime, // Usar la hora formateada con AM/PM
                        start: date,
                        allDay: false,
                        backgroundColor: color,
                        url: urlRedirect
                    });
                });

                initializeCalendar(eventsArray); // Inicializar el calendario después de cargar los eventos
            },
            error: function (result) {
                // Manejar errores de AJAX
            }
        });

        // Agregar evento click para activar el tooltip
        $('#calendar').on('click', '.fc-past-day', function () {
            $(this).tooltip('show');
        });

    });
</script>


<script>
    // Esperar a que el documento esté listo
    $(document).ready(function () {
        // Obtener la fecha actual en formato 'yyyy-mm-dd'
        var today = new Date().toLocaleDateString('en-CA'); // Cambia 'en-CA' según tu localidad

        // Establecer la fecha mínima en el campo de fecha, excluyendo hoy
        var tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1); // Incrementar la fecha en un día
        var tomorrowFormatted = tomorrow.toLocaleDateString('en-CA');
        $('#appointmentDate1').attr('min', tomorrowFormatted);

        // Función para actualizar el campo oculto con la fecha y hora combinadas
        function updateAppointmentDate() {
            var appointmentDate = $('#appointmentDate1').val(); // Obtener valor de appointmentDate1
            var appointmentTime = $('#appointmentTime').val(); // Obtener valor de appointmentTime
            var combinedDateTime = appointmentDate + 'T' + appointmentTime; // Combinar fecha y hora

            $('#AppointmentDate').val(combinedDateTime); // Establecer valor en el campo oculto
        }

        // Llamar a la función cuando cambie la fecha o la hora
        $('#appointmentDate1, #appointmentTime').change(function () {
            updateAppointmentDate(); // Actualizar el campo oculto
        });

        // Llamar a la función inicialmente para establecer el valor predeterminado
        updateAppointmentDate();

        // Función para consultar los datos del usuario
        campoCedula = document.getElementById('Identification');
        campoCedula.addEventListener('input', function () {
            var valor = campoCedula.value.trim();
            if (valor.length > 0 && valor[0] !== '0') {
                valor = '0' + valor;
            }
            campoCedula.value = valor;
        });

        // Dopdown Tipo de Identificación
        $('#DocumentType').change(function () {
            var valorSeleccionado = $(this).val();
            var $campo = $('#Identification');

            if (valorSeleccionado == "1") {
                $campo.val('').attr('readonly', false).mask('00-0000-0000');
            } else if (valorSeleccionado == "2") {
                $campo.val('').attr('readonly', false).mask('00-0000-0000-0000');
            } else {
                $campo.val('').attr('readonly', false).unmask(); // Remover la máscara
            }
        });
    });
</script>


<!-- Consultar datos del usuario  y validaciones -->
<script>
    $('#RegisterAppointmentForm').submit(function (event) {
        event.preventDefault();
        var formData = new FormData(this);
        $.ajax({
            url: $(this).attr('action'),
            type: $(this).attr('method'),
            data: formData,
            processData: false, // No procesar los datos
            contentType: false,
            success: function (response) {
                var responseParts = response.message.split("|");
                if (response.success) {
                    Swal.fire({
                        title: 'Éxito',
                        text: responseParts[0],
                        icon: responseParts[1],
                        confirmButtonText: 'Aceptar',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.reload();
                        }
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: responseParts[0],
                        icon: responseParts[1],
                        confirmButtonText: 'Aceptar',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });
                }
            },
            error: function (xhr, status, error) {
                Swal.fire({
                    title: 'Error',
                    text: 'Error al agregar la pregunta.',
                    icon: 'error',
                    confirmButtonText: 'Aceptar',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                });
            }
        });
    });
</script>